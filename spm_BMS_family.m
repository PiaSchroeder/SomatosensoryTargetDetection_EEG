function [exp_r,exp_r_fam,xp_perfam,xp_fam] = spm_BMS_family(lme, Nsamp, partition)
% Family-level bayesian model selection for group studies
% 
% INPUT:
% lme      - array of log model evidences 
%              rows: subjects
%              columns: models (1..Nk)
% Nsamp    - number of samples used to compute exceedance probabilities
%            (default: 1e6)
% partition - vector of model partitions (eg. [1 1 1 2 2 3 3])          
% 
% OUTPUT:
% exp_r     - expectation of the posterior p(r|y)
% exp_r_fam - expectation of the family posterior p(r|y)
% xp_perfam - exceedance probabilities within families
% xp_fam    - family eyceedance probabilities
% 
% REFERENCES:
%
% Stephan KE, Penny WD, Daunizeau J, Moran RJ, Friston KJ (2009)
% Bayesian Model Selection for Group Studies. NeuroImage 46:1004-1017
%
% Rigoux, L, Stephan, KE, Friston, KJ and Daunizeau, J. (2014)
% Bayesian model selection for group studies—Revisited. 
% NeuroImage 84:971-85. doi: 10.1016/j.neuroimage.2013.08.065
%
% Penny, W. D., Stephan, K. E., Daunizeau, J., Rosa, M. J., Friston, K. J., 
% Schofield, T. M., & Leff, A. P. (2010). Comparing families of dynamic 
% causal models. PLoS computational biology, 6(3).
%__________________________________________________________________________
%
% Modified by PS: based on spm_BMS.m, now runs family-level BMS
%
% Original script: spm_BMS.m
% Copyright (C) 2008 Wellcome Trust Centre for Neuroimaging
% Klaas Enno Stephan, Will Penny
% $Id: spm_BMS.m 6442 2015-05-21 09:13:44Z will $


if nargin < 2 || isempty(Nsamp)
    Nsamp = 1e6;
end
if nargin < 3
    error('This is for family level inference only! Please provide a model partition vector!')
end

Ni      = size(lme,1);  % number of subjects
Nk      = size(lme,2);  % number of models
K       = length(unique(partition)); % number of families
c       = 1;
cc      = 10e-4;

% Size of families 
ind = cell(1,K);
fam_size = nan(1,K);
for i=1:K
    ind{i} = find(partition==i);
    fam_size(i) = length(ind{i});
end

% prior observations
%--------------------------------------------------------------------------
alpha0 = ones(1,Nk);
for i = 1:K
    alpha0(ind{i}) = 1/fam_size(i);
end
alpha = alpha0;

% iterative VB estimation
%--------------------------------------------------------------------------
while c > cc

    % compute posterior belief g(i,k)=q(m_i=k|y_i) that model k generated
    % the data for the i-th subject
    for i = 1:Ni
        for k = 1:Nk
            % integrate out prior probabilities of models (in log space)
            log_u(i,k) = lme(i,k) + psi(alpha(k))- psi(sum(alpha));
        end
        
        % exponentiate (to get back to non-log representation)
        u(i,:)  = exp(log_u(i,:)-max(log_u(i,:)));
        
        % normalisation: sum across all models for i-th subject
        u_i     = sum(u(i,:));
        g(i,:)  = u(i,:)/u_i;
    end
            
    % expected number of subjects whose data we believe to have been 
    % generated by model k
    for k = 1:Nk
        beta(k) = sum(g(:,k));
    end

    % update alpha
    prev  = alpha;
    for k = 1:Nk
        alpha(k) = alpha0(k) + beta(k);
    end
    
    % convergence?
    c = norm(alpha - prev);

end


% Compute expectation of the posterior p(r|y)
%--------------------------------------------------------------------------
exp_r = alpha./sum(alpha);


% Sample from the posterior and compute XPs p(r_i>r_j) per family
%--------------------------------------------------------------------------
[xp_perfam, r_samp] = spm_dirichlet_exceedance_fam(alpha,Nsamp,partition);


% Compute family level XPs
%--------------------------------------------------------------------------
% Get stats from family posterior
s_samp = nan(Nsamp,K);
exp_r_fam = nan(1,K);
for i = 1:K
    ri = r_samp(:,ind{i});
    s_samp(:,i) = sum(ri,2);
    exp_r_fam(i) = mean(s_samp(:,i)); 
end

% Use family samples to compute family XPs
[~,j]  = max(s_samp,[],2);
xp_fam = histc(j,1:K)';
xp_fam = xp_fam/Nsamp;






